-- Create Profiles table
create table profiles (
  id uuid references auth.users on delete cascade not null primary key,
  updated_at timestamp with time zone,
  username text unique,
  full_name text,
  avatar_url text,
  bio text, -- New column for biography

  constraint username_length check (char_length(username) >= 3)
);

-- Set up Row Level Security (RLS)
alter table profiles
  enable row level security;

create policy "Public profiles are viewable by everyone." on profiles
  for select using (true);

create policy "Users can insert their own profile." on profiles
  for insert with check (auth.uid() = id);

create policy "Users can update own profile." on profiles
  for update using (auth.uid() = id);

-- This trigger automatically creates a profile entry when a new user signs up.
create function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  insert into public.profiles (id, username, full_name, avatar_url)
  values (
    new.id,
    substring(new.email from 1 for position('@' in new.email) - 1),
    new.raw_user_meta_data->>'full_name',
    new.raw_user_meta_data->>'avatar_url'
   );
  return new;
end;
$$;

create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- Create Posts table
create table posts (
    id bigint generated by default as identity primary key,
    user_id uuid references public.profiles not null,
    content text not null,
    image_url text,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Set up RLS for posts
alter table posts enable row level security;
create policy "Posts are viewable by everyone" on posts for select using (true);
create policy "Users can insert their own posts" on posts for insert with check (auth.uid() = user_id);
create policy "Users can update their own posts" on posts for update with check (auth.uid() = user_id);
create policy "Users can delete their own posts" on posts for delete with check (auth.uid() = user_id);

-- Create Comments table
create table comments (
    id bigint generated by default as identity primary key,
    user_id uuid references public.profiles not null,
    post_id bigint references public.posts on delete cascade not null,
    content text not null,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Set up RLS for comments
alter table comments enable row level security;
create policy "Comments are viewable by everyone" on comments for select using (true);
create policy "Users can insert their own comments" on comments for insert with check (auth.uid() = user_id);
create policy "Users can update their own comments" on comments for update with check (auth.uid() = user_id);
create policy "Users can delete their own comments" on comments for delete with check (auth.uid() = user_id);

-- Create Likes table
create table likes (
    user_id uuid references public.profiles not null,
    post_id bigint references public.posts on delete cascade not null,
    primary key (user_id, post_id)
);

-- Set up RLS for likes
alter table likes enable row level security;
create policy "Likes are viewable by everyone" on likes for select using (true);
create policy "Users can insert their own likes" on likes for insert with check (auth.uid() = user_id);
create policy "Users can delete their own likes" on likes for delete with check (auth.uid() = user_id);

-- Create Followers table
create table followers (
    follower_id uuid references public.profiles not null,
    following_id uuid references public.profiles not null,
    primary key (follower_id, following_id)
);

-- Set up RLS for followers
alter table followers enable row level security;
create policy "Followers are viewable by everyone" on followers for select using (true);
create policy "Users can insert their own follow relationships" on followers for insert with check (auth.uid() = follower_id);
create policy "Users can delete their own follow relationships" on followers for delete with check (auth.uid() = follower_id);

-- Create storage bucket for avatars
insert into storage.buckets (id, name, public)
values ('avatars', 'avatars', true);

create policy "Avatar images are publicly accessible." on storage.objects
  for select using (bucket_id = 'avatars');

create policy "Anyone can upload an avatar." on storage.objects
  for insert with check (bucket_id = 'avatars');
  
create policy "Anyone can update their own avatar." on storage.objects
  for update with check (bucket_id = 'avatars' and auth.uid() = owner);


-- Function to get post with author info
create or replace view public.posts_with_author as
select
    p.id,
    p.content,
    p.image_url,
    p.created_at,
    p.user_id as author_id,
    pr.username as author_username,
    pr.full_name as author_full_name,
    pr.avatar_url as author_avatar_url,
    (select count(*) from likes where post_id = p.id) as likes_count,
    (select count(*) from comments where post_id = p.id) as comments_count,
    case
        when auth.uid() is not null then (select exists(select 1 from likes where post_id = p.id and user_id = auth.uid()))
        else false
    end as user_has_liked_post
from
    posts p
join
    profiles pr on p.user_id = pr.id;

-- Function to get comments with author info
create or replace view public.comments_with_author as
select
    c.id,
    c.post_id,
    c.content,
    c.created_at,
    c.user_id as author_id,
    pr.username as author_username,
    pr.full_name as author_full_name,
    pr.avatar_url as author_avatar_url
from
    comments c
join
    profiles pr on c.user_id = pr.id;

-- Add counts to profiles table
create or replace function public.get_followers_count(profile_id uuid)
returns integer as $$
begin
  return (select count(*) from followers where following_id = profile_id);
end;
$$ language plpgsql stable;

create or replace function public.get_following_count(profile_id uuid)
returns integer as $$
begin
  return (select count(*) from followers where follower_id = profile_id);
end;
$$ language plpgsql stable;

-- A more performant view for profiles
drop view if exists public.profiles_view;
create or replace view public.profiles_with_counts as
select
  p.id,
  p.username,
  p.full_name,
  p.avatar_url,
  p.bio,
  (select count(*) from followers where following_id = p.id) as followers_count,
  (select count(*) from followers where follower_id = p.id) as following_count
from
  profiles p;
